unit UProdutorController;

interface

uses UProdutorDAO, UPRodutor, Dialogs, System.SysUtils;

type
  TProdutorController = class
  private
    FDAO: TProdutorDAO;
  public
    constructor Create;
    destructor Destroy; override;
    function ExcluirProdutor(const Produtor: TProdutor): Boolean;
    function InserirProdutor(const Produtor: TProdutor): Boolean;
    function AtualizarProdutor(const Produtor: TProdutor): Boolean;
    function LocalizarProdutor(const ID: Integer): TProdutor; overload;
  end;

implementation

{ TProdutorController }

constructor TProdutorController.Create;
begin
  FDAO := TProdutorDAO.Create;
end;

destructor TProdutorController.Destroy;
begin
  FDAO.Free;
  inherited;
end;

function TProdutorController.ExcluirProdutor(const Produtor: TProdutor): Boolean;
begin
  Result := FDAO.Excluir(Produtor);
end;

function TProdutorController.InserirProdutor(const Produtor: TProdutor): Boolean;
begin
  if Produtor.Nome = '' then
    raise Exception.Create('O campo NOME deve ser preenchido.')
  else
    Result := FDAO.Inserir(Produtor);
end;

function TProdutorController.AtualizarProdutor(
  const Produtor: TProdutor): Boolean;
begin
  if Produtor.Nome = '' then
    raise Exception.Create('O campo NOME deve ser preenchido.')
  else
    Result := FDAO.Atualizar(Produtor);
end;

function TProdutorController.LocalizarProdutor(const ID: Integer): TProdutor;
begin
  Result := FDAO.Localizar(ID);
end;

end.
