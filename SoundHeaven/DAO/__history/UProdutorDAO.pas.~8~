unit UProdutorDAO;

interface

uses UCOnexao, UProdutor, Data.Win.ADODB, System.SysUtils;

type
  TProdutorDAO = class
  private
    FConn: TConexaoDB;
  public
    constructor Create;
    destructor Destroy; override;
    function Excluir(const Produtor: TProdutor): Boolean;
    function Inserir(const Produtor: TProdutor): Boolean;
  end;

implementation

{ TProdutorDAO }

constructor TProdutorDAO.Create;
begin
  FConn := TConexaoDB.Create;
end;

destructor TProdutorDAO.Destroy;
begin
  FConn.Free;
  inherited;
end;

function TProdutorDAO.Excluir(const Produtor: TProdutor): Boolean;
var
  StoredProc: TADOStoredProc;
begin
  try
    StoredProc := TADOStoredProc.Create(nil);
    try
      with StoredProc do
      begin
        Connection := FConn.GetConnection;
        ProcedureName := 'sp_ProdutorExcluir';
        Parameters.Refresh;
        Parameters.ParamByName('@Produtor_ID').Value := Produtor.ID;
        ExecProc;
      end;
      Result := True;
    except
      on E: Exception do
      begin
        raise Exception.Create('Erro ao excluir registro: ' + E.Message);
        Result := False;
      end;
    end;
  finally
    StoredProc.Free;
  end;
end;

function TProdutorDAO.Inserir(const Produtor: TProdutor): Boolean;
var
  StoredProc: TADOStoredProc;
begin
  try
    StoredProc := TADOStoredProc.Create(nil);
    try
      with StoredProc do
      begin
        Connection := FConn.GetConnection;
        ProcedureName := 'sp_ProdutorInserir';
        Parameters.Refresh;
        Parameters.ParamByName('@Produtor_Nome').Value := Produtor.Nome;
        ExecProc;
      end;
      Result := True;
    except
      on E: Exception do
      begin
        raise Exception.Create('Erro ao inserir registro ' + E.Message);
        Result := False;
      end;
    end;
  finally
    StoredProc.Free;
  end;
end;

end.
