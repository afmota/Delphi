unit UArtistasController;

interface

uses UArtistas, UArtistasDAO, FireDAC.Comp.Client;

type
  TArtistasController = class
  private
    FDAO: TArtistasDAO;
  public
    constructor Create(AConn: TFDConnection);
    procedure AdicionarArtista(NomeArtista: string);
    procedure AtualizarArtista(ID: Integer; NomeArtista: string; Status: Integer);
    procedure AlterarStatusArtista(ID: Integer; NovoStatus: Integer);
    function BuscarArtista(ID: Integer): TArtista;
    function ListarArtistasAtivos: TFDQuery;
  end;

implementation

constructor TArtistasController.Create(AConn: TFDConnection);
begin
  FDAO := TArtistasDAO.Create(FConn);
end;

procedure TArtistasController.AdicionarArtista(NomeArtista: string);
var
  Artista: TArtista;
begin
  Artista := TArtista.Create(NomeArtista);
  FDAO.Inserir(Artista);
end;

procedure TArtistasController.AtualizarArtista(ID: Integer; NomeArtista: string; Status: Integer);
var
  Artista: TArtista;
begin
  Artista := FDAO.BuscarPorId(ID);
  if Artista <> nil then
  begin
    Artista.Artista := NomeArtista;
    Artista.Status := Status;
    FDAO.Atualizar(Artista);
  end;
end;

procedure TArtistasController.AlterarStatusArtista(ID: Integer; NovoStatus: Integer);
var
  Artista: TArtista;
begin
  Artista := FDAO.BuscarPorId(ID);
  if Artista <> nil then
  begin
    Artista.AlterarStatus(NovoStatus);
    FDAO.Atualizar(Artista);
  end;
end;

function TArtistasController.BuscarArtista(ID: Integer): TArtista;
begin
  Result := FDAO.BuscarPorId(ID);
end;

function TArtistasController.ListarArtistasAtivos: TFDQuery;
begin
  Result := FDAO.ListarAtivos;
end;

end.
