unit UArtistasDAO;

interface

uses UArtistas, FireDAC.Comp.Client, System.SysUtils;

type
  TArtistasDAO = class
  private
    FConn: TFDConnection; // Conexão com o SQL Server
  public
    constructor Create(AConn: TFDConnection);

    // Métodos CRUD
    procedure Inserir(Artista: TArtista);
    procedure Atualizar(Artista: TArtista);
    procedure Excluir(ID: Integer);
    function BurcarPorId(ID: Integer): TArtista;
    function ListarAtivos: TFDQuery;
  end;

implementation

{ TArtistasDAO }

// Método para atualizar artista existente
procedure TArtistasDAO.Atualizar(Artista: TArtista);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FConn;
    Query.SQL.Text := 'UPDATE TB_Artistas SET Artista = :Artista, Stauts = :Status' +
                      'WHERE ID = :ID';
    Query.ParamByName('Artista').AsString := Artista.Artista;
    Query.ParamByName('Status').AsInteger := Artista.Status;
    Query.ParamByName('ID').AsInteger := Artista.ID;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

// Método para buscar artista por ID
function TArtistasDAO.BurcarPorId(ID: Integer): TArtista;
var
  Query: TFDQuery;
  Artista: TArtista;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FConn;
    Query.SQL.Text := 'SELECT * FROM TB_Artistas WHERE ID = :ID';
    Query.ParamByName('ID').AsInteger := ID;
    Query.Open;

    if not Query.IsEmpty then
    begin
      Artista := TArtista.Create(Query.FieldByName('Artista').AsString,
                                 Query.FieldByName('Status').AsInteger);
      Artista.ID := Query.FieldByName('ID').AsInteger;
      Artista.DataInclusão := Query.FieldByName('Data_Inclusao').AsDateTime;
      Result := Artista;
    end
    else
      Result := nil;
  finally
    Query.Free;
  end;
end;

constructor TArtistasDAO.Create(AConn: TFDConnection);
begin
  FConn := AConn;
end;

// Método para excluir artista [só como exemplo, registros não serão apagados do banco]
procedure TArtistasDAO.Excluir(ID: Integer);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FConn;
    Query.SQL.Text := 'DELETE FROM TB_Artistas WHERE ID = :ID';
    Query.ParamByName('ID').AsInteger := ID;
    Query.ExecSQL;
  finally
    Query.Free;
  end;

end;

// Método para inserir novo artista no banco
procedure TArtistasDAO.Inserir(Artista: TArtista);
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FConn;
    Query.SQL.Text := 'INSERT INTO TB_Artistas (Artista, Status, Data_Inclusao)' +
                      'VALUES (:Gravadora, :Status, :DataInclusao)';
    Query.ParamByName('Artista').AsString := Artista.Artista;
    Query.ParamByName('Status').AsInteger := Artista.Status;
    Query.ParamByName('DataInclusao').AsDateTime := Artista.DataInclusão;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

// Método para listar gravadoras ativas
function TArtistasDAO.ListarAtivos: TFDQuery;
var
  Query: TFDQuery;
begin
  Query := TFDQuery.Create(nil);
  try
    Query.Connection := FConn;
    Query.SQL.Text := 'SELECT * FROM TB_Artistas WHERE Status = 1';
    Query.Open;
    Result := Query;
  except
    Query.Free;
    raise;
  end;
end;

end.
